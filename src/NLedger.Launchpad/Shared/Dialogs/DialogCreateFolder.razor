@using Models
@using Utility.Validation
@inject Services.DialogService DialogService
@inject Services.ModelService Model
@inject Services.AlertService AlertService

<DialogBase Title="Create Folder" SubmitButton="Services.DialogButtonKind.Create" CloseButton="Services.DialogButtonKind.Cancel" OnValidate="OnValidate" OnSubmit="@OnSubmit">

    <p class="lead">
        Create a new sub-folder under '@ParentFolderModel.Title'.
    </p>
    <div class="form-group">
        <label for="fname">Folder name:</label>
        <input type="text" class="@FormControlClass()" placeholder="Enter folder name" id="fname" @bind-value="FolderName">
        <ValidationMessageLine Validator="@FileSystemNameValidator" />
    </div>
</DialogBase>

@code {

    public WorkspaceItemModel ParentFolderModel { get; set; }

    public string FolderName { get; set; }
    public static Validator<string> FileSystemNameValidator { get; } = Validators.GetFileSystemNameValidator();

    protected override void OnInitialized()
    {
        ParentFolderModel = (WorkspaceItemModel)DialogService.CurrentModel;
        base.OnInitialized();
    }

    private void OnValidate(Services.DialogValidationResult validationResult)
    {
        validationResult.IsValid = FileSystemNameValidator.Validate(FolderName);
    }

    private async void OnSubmit()
    {
        await AlertService.TraceResult(async () => await Model.Model.CreateFolder(ParentFolderModel.Key, FolderName), () => $"Folder {FolderName} is created");
    }

    private string FormControlClass()
    {
        return FileSystemNameValidator.ValidationResult.IsValid ? "form-control" : "form-control is-invalid";
    }

}